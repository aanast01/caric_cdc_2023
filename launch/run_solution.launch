<launch>

    <arg name="manual_control" default="false" />
    <arg name="scenario" default="mbs" />

    <arg name="grid_resolution" default="6" unless="$(eval arg('scenario') == 'hangar')"/>
    <arg name="grid_resolution" value="5" if="$(eval arg('scenario') == 'hangar')"/>
    
    <!-- Launch the simulator -->
    <include file="$(find caric_mission)/launch/run_$(arg scenario).launch" />

    <!-- GCS -->
    <group ns="gcs">
        
        <arg name="namespace"  default="gcs" />
        <param name="scenario" value="$(arg scenario)" />
        <param name="namespace" value="$(arg namespace)" />
        <param name="grid_resolution" value="$(arg grid_resolution)" />
        <param name="debug" value="true" />

	    <node name="gcs_script" pkg="kios_solution" type="gcs.py"  output="screen"/>
    </group>


    <!-- EXPLORERS -->
    <group ns="jurong">
        
        <arg name="namespace"  default="jurong" />
        <param name="scenario" value="$(arg scenario)" />
        <param name="namespace" value="$(arg namespace)" />
        <param name="grid_resolution" value="$(arg grid_resolution)" />
        <param name="debug" value="true" />
        
        <node pkg="octomap_server" type="octomap_server_node" name="octomap_server_$(arg namespace)">
		    <param name="resolution" value="4" />
		
            <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
            <param name="frame_id" type="string" value="world" />

            <param name="sensor_model/hit" value="1.0" />
            <param name="sensor_model/miss" value="0.3" />

            <param name="sensor_model/min" value="0.3" />
            <param name="sensor_model/max" value="1.0" />
            
            <!-- maximum range to integrate (speedup!) -->
            <param name="sensor_model/max_range" value="-1" />
            
            <param name="pointcloud_min_z" value="2.0" />
            
            <!-- data source to integrate (PointCloud2) -->
            <remap from="cloud_in" 		to="/$(arg namespace)/cloud_inW" />
	
    	</node>

		<!-- <node name="init_flight" pkg="kios_solution" type="test_flight.py"  output="screen"/> -->
		<node name="explorer_trajectory" pkg="kios_solution" type="explorer.py"  output="screen"/>
        <node name="fov_control" pkg="kios_solution" type="uav_fov.py"  output="screen"/>
        <node name="explorer_path" pkg="kios_solution" type="explorer_path.py"  output="screen"/>
    </group>

    <group unless="$(eval arg('scenario') == 'hangar')">
        <group ns="raffles">
            
            <arg name="namespace"  default="raffles" />
            <param name="scenario" value="$(arg scenario)" />
            <param name="namespace" value="$(arg namespace)" />
            <param name="grid_resolution" value="$(arg grid_resolution)" />
            <param name="debug" value="true" />

            <node pkg="octomap_server" type="octomap_server_node" name="octomap_server_$(arg namespace)">
                <param name="resolution" value="4" />
                
                <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
                <param name="frame_id" type="string" value="world" />

                <param name="sensor_model/hit" value="1.0" />
                <param name="sensor_model/miss" value="0.3" />

                <param name="sensor_model/min" value="0.3" />
                <param name="sensor_model/max" value="1.0" />
                
                <!-- maximum range to integrate (speedup!) -->
                <param name="sensor_model/max_range" value="-1" />
                
                <param name="pointcloud_min_z" value="2.0" />
                
                <!-- data source to integrate (PointCloud2) -->
                <remap from="cloud_in" 		to="/$(arg namespace)/cloud_inW" />
            
            </node>
            
            <!-- <node name="init_flight" pkg="kios_solution" type="test_flight.py"  output="screen" /> -->
            <node name="explorer_trajectory" pkg="kios_solution" type="explorer.py"  output="screen"/>
            <node name="explorer_path" pkg="kios_solution" type="explorer_path.py"  output="screen"/>
            <node name="fov_control" pkg="kios_solution" type="uav_fov.py"  output="screen"/>

        </group>
    </group>
    
    <!-- PHOTOGRAPHERS -->
    <group ns="changi">
        <arg name="namespace"  default="changi" />
        <param name="namespace" value="$(arg namespace)" />
        <param name="scenario" value="$(arg scenario)" />
        <param name="grid_resolution" value="$(arg grid_resolution)" />
        <param name="debug" value="true" />

        <node name="fov_control" pkg="kios_solution" type="uav_fov.py"  output="screen"/>
        <node name="photographer_trajectory" pkg="kios_solution" type="photographer.py"  output="screen"/>
        <node name="photographer_path" pkg="kios_solution" type="photographer_path.py"  output="screen"/>
    </group>
    

    <group ns="sentosa">
        <arg name="namespace"  default="sentosa" />
        <param name="namespace" value="$(arg namespace)" />
        <param name="scenario" value="$(arg scenario)" />
        <param name="grid_resolution" value="$(arg grid_resolution)" />
        <param name="debug" value="true" />

        <node name="fov_control" pkg="kios_solution" type="uav_fov.py"  output="screen"/>
        <node name="photographer_trajectory" pkg="kios_solution" type="photographer.py"  output="screen"/>
        <node name="photographer_path" pkg="kios_solution" type="photographer_path.py"  output="screen"/>
    </group>
    
    <group unless="$(eval arg('scenario') == 'hangar')">
        <group ns="nanyang">
            <arg name="namespace"  default="nanyang" />
            <param name="namespace" value="$(arg namespace)" />
            <param name="scenario" value="$(arg scenario)" />
            <param name="grid_resolution" value="$(arg grid_resolution)" />
            <param name="debug" value="true" />

            <node name="fov_control" pkg="kios_solution" type="uav_fov.py"  output="screen"/>
            <node name="photographer_trajectory" pkg="kios_solution" type="photographer.py"  output="screen"/>
            <node name="photographer_path" pkg="kios_solution" type="photographer_path.py"  output="screen"/>
        </group>
    </group>
    
    <!-- For visualization -->
    <node name="odom2tf" pkg="caric_mission" type="odom2tf.py"  />
    
    <!-- octomap translator service -->
    <node name="octomapTranslate" pkg="kios_solution" type="kios_solution_octomap_translator_node"  />

</launch>
